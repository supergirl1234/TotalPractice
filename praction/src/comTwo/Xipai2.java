package comTwo;

import java.util.Scanner;

/**
 * Author:Fanleilei
 * Created:2019/6/11 0011
 *
 *  现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。
 *  * 首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。
 *  * 接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。
 *  * 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。
 *  * 在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。
 *  * 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。
 *  *
 *  * 输入描述：
 *  * 第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。
 */


//解题思路：
//每次读取一个数之后，算出他经过k次洗牌后的位置，只用一个长度为2n数组用来输出 根据当前数的位置，可以算出
//经过一次洗牌后的位置
//如果当前数小于等于n（即在左手），则它下次出现的位置是 2*当前位置-1
//如果当前位置大于n（即在右手）, 则它下次出现的位置是 2*（当前位置 - n）
public class Xipai2 {

    public static void main(String[] args) {

        Scanner in=new Scanner(System.in);
        int groups=in.nextInt();//几组牌
        while(groups-->0) {
            int n = in.nextInt();//数据个数的一半
            int k = in.nextInt();//洗几次牌
            int[] res = new int[2 * n];

            for(int i=0;i<2*n;i++) {//数组中的每一个数据
                int temp=i+1;//每一个数的初始位置
                for (int j = 0; j< k; j++) {//对于数组中的每一个数，计算洗k次牌之后的位置
                     if(temp<=n){

                         temp=2*temp-1;//对于前半部分的数据，新的位置为2*原来的位置-1
                     }else{
                         temp=2*(temp-n);//对于后半部分的数据，新的位置为2*（原来的位置-n）
                     }


                }
                res[temp-1]=in.nextInt();//将输入的数放在洗了k次牌之后最终应该处的位置。
            }

            //将洗了k次牌之后的数据输出。
            for(int i=0;i<2*n;i++){

                if(i==2*n-1){

                    System.out.print(res[i]);
                    System.out.println();

                }else {
                    System.out.print(res[i] + " ");
                }
            }

        }
    }
}
